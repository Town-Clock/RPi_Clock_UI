from __future__ import annotations
from _typeshed import Incomplete
from typing import overload

class NumberError(TypeError): ...

class Number:
    x: Incomplete
    def __init__(self, x: int | float) -> None: ...
    @overload
    def __pow__(self, power: Number, modulo: None) -> Number: ...
    @overload
    def __pow__(self, power: Number, modulo: int) -> Number: ...
    @overload
    def __pow__(self, power: Number, modulo: float) -> Number: ...
    @overload
    def __pow__(self, power: Number, modulo: Number) -> Number: ...
    @overload
    def __pow__(self, power: int, modulo: None) -> Number: ...
    @overload
    def __pow__(self, power: int, modulo: int) -> Number: ...
    @overload
    def __pow__(self, power: int, modulo: float) -> Number: ...
    @overload
    def __pow__(self, power: int, modulo: Number) -> Number: ...
    @overload
    def __pow__(self, power: float, modulo: None) -> Number: ...
    @overload
    def __pow__(self, power: float, modulo: int) -> Number: ...
    @overload
    def __pow__(self, power: float, modulo: float) -> Number: ...
    @overload
    def __pow__(self, power: float, modulo: Number) -> Number: ...
